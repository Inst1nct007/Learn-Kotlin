OUTPUT

1. WAP to print your name

2. WAP to print your age

3. In print("i = $i"). Here $i is a template expression

DATATYPES

1. Int Eg. val num = 1        toInt()

2. Long Eg. val num = 1L        toLong()

3. Byte Eg. val num: Byte = 1        toByte()

4. Double Eg. val num = 1.0        toDouble()

5. Float Eg. val num = 1.0f        toFloat()

6. UByte Eg. val x: UByte = 1u

7. UShort Eg. val x: UShort = 1u

8. UInt Eg. val x: UInt = 1u

9. ULong Eg. val x: ULong = 1u

THERE ARE TWO TYPES OF STRINGS IN KOTLIN a.  Escaped String ("")        b. Raw String ("""""")

OPERATIONS

1. shl -> Signed Shift Left

2. shr -> Signed Shift Right

The right shift represents integer division by 2bits, while the left shift is multiplication by 2bits.

3. ushr -> Unsigned Shift Right

4. and -> Bitwise AND

5. or -> Bitwise OR

6. xor -> Bitwise XOR

7. num.inv() -> Flips the 1s to 0s and 0s to 1s. Shows the 2's complement.

VARIABLES

1. WAP to store your firstname and lastname in two variables and print them together.

2. WAP to store the day, month and year in 3 variables and print them in this format, dd/mm/yyyy.

3. WAP to store the radius of a circle in a variable and print it's perimeter and area.

4. WAP to store the length and breadth of a rectangle in two variables and print the perimeter and area.

# HINT Learn about the difference between val and const

5. Take your age as a float, but only print the integer part.
Eg. Age - 21.6
Print - Age is 21

6. Store the total amount of money u have. Print the money excluding any change.
Eg. Total Money - $100.48
Money without change - $100

7. WAP to print the type of a variable in Kotlin.

x::class.simpleName

8. Double.NaN (Not a number) is considered greater than any other element including Double.POSITIVE_INFINITY

9. -0.0 is considered lesser than 0.0        print(listOf(Double.NaN, Double.POSITIVE_INFINITY, 0.0, -0.0).sorted())

CONDITIONAL STATEMENTS

1. WAP to store the age of user and check if they are adult or minor

2. WAP to store the temperature. Print "Hot" if it's >=30; Print "Pleasant" if it's >=20; Print "Cool" if it's >= 10; Else print "Cold".

Soln.

when {
        (temp >= 30) -> print("Weather is Hot")
        
        (temp >= 20) -> print("Weather is Pleasant")
        
        (temp >= 10) -> print("Weather is Cool")
        
        else -> print("Weather is Cold")
    }

3. WAP to check if a planet is in our solar system

Soln.

  val planet: String = "Earch"
    
  val isInSolarSystem: String = when (planet.lowercase()) {
        "mercury" -> "Planet is in Solar System"
        "venus" -> "Planet is in Solar System"
        "earth" -> "Planet is in Solar System"
        "mars" -> "Planet is in Solar System"
        "jupiter" -> "Planet is in Solar System"
        "saturn" -> "Planet is in Solar System"
        "uranus" -> "Planet is in Solar System"
        "neptune" -> "Planet is in Solar System"
        else -> "Planet is not in Solar System"
    }

4. WAP to print if the user is arriving or leaving

Soln.

    val greeting: String = "hello"
    
    when (greeting.lowercase()) {
        "hello", "hi" -> print("User is Arriving")
        "bye", "goodbye" -> print("User is Leaving")
        else -> print("Don't know what's happening")
    }

5. WAP to print the number of digits in a number

Soln.

    val num: Int = 12
    
    val digits: String = when (num) {
        in 1..9 -> "1"
        in 10..99 -> "2"
        in 100..1000 -> "3"
        else -> "More than 3 digits"
    }
    
    print(digits)

6. WAP to print the season

Soln.

    when(season) {
        in 1..3 -> print("Spring season")
        in 4..6 -> print("Summer season")
        in 7..8 -> print("Rainy season")
        in 9..10 -> print("Autumn season")
        in 11..12 -> print("Winter season")
        !in 1..12 -> print("Enter valid month of year")
    }

NULL OPERATIONS

1. Use the ? and !! operators for null

ARRAY

1. WAP to create an array of Int, Float, Double, String

2. WAP to initialize an array with 5 0s.

3. WAP to print the previous array using forEach{}

ARRAYS ARE INVARIANT i.e. we cannot assign Array<String> to Array<any>


